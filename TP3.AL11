#include <stdio.h>
#include <stdlib.h>

//Dèfinition de "element"
typedef struct element {
    int val;
    struct element* suivant;
} element;

// Fonction pour crèer une liste vide
element* creerListe() {
    return NULL;
}

//Fonction pour charger une liste a partir d'un tableau 

element* chargerListe(int* Tab, int taille, element* liste) {
    for (int i = 0; i < taille; i++) {
        element* nouveau = (element*)malloc(sizeof(element));
        nouveau->val = Tab[i];
        nouveau->suivant = liste;
        liste = nouveau;
    }
    return liste;
}

//Fonction pour afficher une listeة
void afficherListe(element* liste) {
    element* courant = liste;
    while (courant != NULL) {
        printf("%d => ", courant->val);
        courant = courant->suivant;
    }
    printf("NULL\n");
}

// Une fonction pour supprimer le dernier élément de la liste
element* supprimerEnFin(element* liste) {
    if (liste == NULL) return NULL;
    if (liste->suivant == NULL) {
        free(liste);
        return NULL;
    }
    element* courant = liste;
    while (courant->suivant->suivant != NULL) {
        courant = courant->suivant;
    }
    free(courant->suivant);
    courant->suivant = NULL;
    return liste;
}

// Une fonction pour ajouter un élément au début de la liste
element* ajouterEnDebut(element* liste, int val) {
    element* nouveau = (element*)malloc(sizeof(element));
    nouveau->val = val;
    nouveau->suivant = liste;
    return nouveau;
}

// Fonction pour vider la liste et afficher un message
void viderListe(element* liste) {
    element* courant = liste;
    while (courant != NULL) {
        element* temp = courant;
        courant = courant->suivant;
        free(temp);
    }
    printf("la liste est vide\n");
}

int main() {
    int Tab[10] = {1, 3, 5, 7, 8, 10, 9, 11, 13, 20};
    element* liste = creerListe();
    element* L = chargerListe(Tab, 10, liste);
    afficherListe(L);
    element* L1 = supprimerEnFin(L);
    afficherListe(L1);
    element* L2 = ajouterEnDebut(L1, 40);
    afficherListe(L2);
    viderListe(L2);
    return 0;
}
